/* Les g√©n√©rateurs */
// üí° Revoir la le√ßon sur les it√©rateurs (lien sous la vid√©o)

/* Syntaxe de la fonction g√©n√©rateur */

function* generateur() {      // function *generateur √©galement correct
  yield "premi√®re phrase";
  yield "deuxi√®me phrase";
  return "derni√®re phrase";
}

let iterateur = generateur();
let premierePhrase = iterateur.next();
console.log(premierePhrase.value);
let deuxiemePhrase = iterateur.next();
console.log(deuxiemePhrase.value);
let dernierePhrase = iterateur.next();
console.log(dernierePhrase.value);

/* Les g√©n√©rateurs sont des it√©rables */
// for (let phrase of generateur()) {
//   console.log(phrase);
// }

/* Utilisation de l'op√©rateur spread */
// let phrases = [...generateur()];
// console.log(phrases);

/* Exemple avec notre it√©rateur semaine */
let semaine = {
  // Impl√©mentation de la m√©thode Symbol.iterator : on respecte le protocole it√©rateur
  [Symbol.iterator]: function () {
    // On retourne l'it√©rateur (objet poss√©dant une m√©thode next())
    return {
      position: 0,
      noms: ["lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"],
      next: function () {
        let nom = this.noms[this.position];
        if (nom === undefined) {
          return { done: true }; // C'est fini !
        }
        this.position++;
        return { done: false, value: nom }; // Valeur suivante de l'it√©ration
      }
    }
  }
};

/* Remaniement en g√©n√©rateur */
function* joursSemaine() {
  let position = 0;
  let noms = ["lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche"];
  while (position < noms.length) {
    yield noms[position++];
  }
}

// for (let jour of joursSemaine()) {
//   console.log(jour);
// }

/* G√©n√©rer des valeurs √† l'infini */
// Nombres pairs
function* nombresPairs() {
  let nombre = 0;
  while(true) {
    yield nombre;
    nombre += 2;
  }
}

// for (let nombrePair of nombresPairs()) {
//   console.log(nombrePair);
//   if (nombrePair > 30) break;
// }

// S√©quence de Fibonacci
function* fibonacci() {
  let precedent = 0;
  let actuel = 1;
  while(true) {
    yield actuel;
    [precedent, actuel] = [actuel, precedent + actuel];
  }
}

// for (let nombre of fibonacci()) {
//   console.log(nombre);
//   if (nombre > 30) break;
// }

/* Avantages d'utiliser les g√©n√©rateurs:
- √âconomie de m√©moire : pas besoin de g√©n√©rer les valeurs avant leur utilisation, on les g√©n√®re √† la demande uniquement
- Exploitation de grandes quantit√©s de donn√©es par petits morceaux
- √âcriture d'it√©rables facilit√©e
*/