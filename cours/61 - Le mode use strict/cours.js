/* Le mode use strict */

/* Introduit dans ES5 (en 2009 !) */

/* √Ä quoi √ßa sert ? */

/* Comment l'utiliser ? */
// Directive "use strict"; ou 'use strict';
// file://./script.js
// file://./fonction.js

/* Une fois activ√© ce mode on ne peut pas le retirer */

/* Comment activer le mode strict dans les Dev Tools ? */

/*
Le mode strict est activ√© par d√©faut dans :
- Les classes
- Les modules ES6
*/

/* Diff√©rences mode par d√©faut VS mode strict */

/* Toutes les variables doivent √™tre d√©clar√©es de fa√ßon explicite */
// function declarationObligatoire() {
//   // "use strict";
//   test = "test";
//   console.log(test);
// }
// declarationObligatoire();

/* Les m√©thodes invoqu√©es comme des fonctions auront le mot-cl√© this qui vaudra undefined au lieu de valoir la variable globalThis */
// function thisUndefined() {
//   // "use strict";
//   console.log(this.propriete);
// }
// let obj = { propriete: "propri√©t√© de obj" };
// obj.methode = thisUndefined;
// obj.methode();

// propriete = "propriete de globalThis";
// thisUndefined();

/* Les fonctions invoqu√©es avec call() ou apply() ne feront pas de conversion implicite du thisArg */
// function test() {
//   // "use strict";
//   console.log(this.propriete);
// }
// propriete = "propriete de globalThis";

// function convImpliciteThis() {
//   test.call(undefined);
// }
// convImpliciteThis();

/* L'objet sp√©cial arguments conserve une copie statique des valeurs pass√©es √† la fonction au lieu des r√©f√©rences vers les arguments */
// function uneFonction(arg1, arg2, arg3) {
//   // "use strict";
//   arguments[0] = "deux";
//   arguments[1] = 1234;
//   arguments[2].test = "valeur chang√©e"; // üö® M√™me comportement
//   console.log(arg1, arg2, arg3);
// }

// let un = "un";
// let objet = { test: "test" };
// let nombre = 42;
// uneFonction(un, nombre, { test: "test" });

/* Une erreur de syntaxe est d√©clench√©e si on tente de supprimer une variable, un param√®tre ou une fonction avec delete */
// function erreurDelete(bonjour) {
//   // "use strict";
//   delete bonjour;
// }
// erreurDelete("bonjour");

/* Une erreur est d√©clench√©e si on tente de d√©clarer 2 param√®tres de m√™me nom dans une fonction */
// function memeNomDeProprietes(arg, arg) {
//   // "use strict";
//   console.log(arg);
// }
// memeNomDeProprietes("coucou", "oops");

/* Les nombres en notation octale sont interdits */
// function octal() {
//   // "use strict";
//   console.log(016); // (Z√©ro seize) = 1 * 8 + 6 = 14 en d√©cimal
// }
// octal();

/*
En plus :
- Le code pass√© √† eval() est strict si eval est utilis√© dans un code strict ou si 'use strict' est indiqu√© dans l'argument pass√© √† eval().
- L'instruction with est interdite en mode strict
- Les assignations √† des propri√©t√©s en lecture seule ou tenter de cr√©er ou supprimer des propri√©t√©s sur des objets verrouill√©s d√©clenchent une erreur alors qu'en mode par d√©faut cela √©choue silencieusement
- ...
*/