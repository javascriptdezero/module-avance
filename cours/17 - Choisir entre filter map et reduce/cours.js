/* Choisir entre filter(), map() et reduce() */

let tableau = ["zero", "un", "deux", "trois"];

/* filter() : on veut FILTRER
- On ne modifie PAS les √©l√©ments du tableau
- On veut seulement s√©lectionner une partie de ces √©l√©ments selon certains crit√®res
SORTIE
- Un tableau de taille √©gale ou inf√©rieure au tableau initial
*/

// Filtrer tous les √©l√©ments qui commencent par 'd'
console.log(tableau.filter(function(valeur) {
  return valeur.startsWith('d');
}));

// Filtrer tous les √©l√©ments qui contiennent la lettre 'e'
console.log(tableau.filter(function(valeur) {
  return valeur.includes('e');
}));

/* map() : on veut TRANSFORMER
- On souhaite transformer TOUS les √©l√©ments du tableau
SORTIE :
- Un tableau de taille √©gale au tableau initial
*/

/*
// On transforme chaque √©l√©ment en la cha√Æne "<index>:<valeur>"
console.log(tableau.map(function(valeur, index) {
  return index + ":" + valeur;
}));

// On transforme chaque √©l√©ment en objet { index: <index>, valeur: <valeur> }
console.log(tableau.map(function(valeur, index) {
  return {
    index: index,
    valeur: valeur,
  }
}));
*/

/* reduce() : on veut COMBINER
- On souhaite combiner les √©l√©ments en une valeur unique
SORTIE :
- Toute valeur de tout type (tableau y compris !)
*/

/*
// On calcule la somme des longueurs des cha√Ænes du tableau
console.log(tableau.reduce(function(resultatIntermediaire, valeur) {
  return resultatIntermediaire + valeur.length;
}, 0)); // <-- Valeur initiale √† 0

// On cr√©e un ensemble (Set) ne contenant que les pr√©noms sans doublons
let doublons = ["jean", "jacques", "jean", "john", "jacques"];
console.log(doublons.reduce(function(resultatIntermediaire, valeur) {
  return resultatIntermediaire.add(valeur);
}, new Set()));

// On cr√©e un tableau contenant le nombre de lettres et la
// concat√©nation des 1√®res lettres de chaque mot du tableau
console.log(tableau.reduce(function(resultatIntermediaire, valeur) {
  resultatIntermediaire[0] += valeur.length;
  resultatIntermediaire[1] += valeur[0];
  return resultatIntermediaire;
}, [0, ''])); // <-- Valeur initiale

// On cr√©e un objet contenant le nombre de lettres et la
// concat√©nation des 1√®res lettres de chaque mot du tableau
console.log(tableau.reduce(function(resultatIntermediaire, valeur) {
  resultatIntermediaire.nombreLettres += valeur.length;
  resultatIntermediaire.initiales += valeur[0];
  return resultatIntermediaire;
}, { nombreLettres: 0, initiales: ''})); // <-- Valeur initiale
*/

/* ü§Ø BONUS : reduce() peut √™tre utilis√© pour faire un filter() ou map() ! */

/* Utilisation de reduce √† la place de filter() */
// Filtrer tous les √©l√©ments qui commencent par 'd'
/*
console.log(tableau.reduce(function(resultatIntermediaire, valeur) {
  if (valeur.startsWith('d')) {
    resultatIntermediaire.push(valeur);
  }
  return resultatIntermediaire;
}, [])); // <-- Valeur initiale
*/

/* Utilisation de reduce √† la place de map() */
// On transforme chaque √©l√©ment en la cha√Æne "<index>:<valeur>"
/*
console.log(tableau.reduce(function(resultatIntermediaire, valeur, index) {
  resultatIntermediaire.push(index + ":" + valeur);
  return resultatIntermediaire;
}, [])); // <-- Valeur initiale
*/

