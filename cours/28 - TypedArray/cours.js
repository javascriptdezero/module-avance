/* Le type TypedArray (tableaux typ√©s) */

/* Avant de commencer */

/* Introduit dans ES6 */
// √âquivalent aux tableaux des langages fortement typ√©s de bas niveau comme le C/C++

/* Diff√©rences avec les tableaux classiques (Arrays) */
// Taille fixe qui doit √™tre indiqu√©e au moment de la cr√©ation
// Nombres uniquement dont on sp√©cifie le type (sign√© ou non sign√©) ainsi que la taille disponible par √©l√©ment (8 bits √† 64 bits)
// Les √©l√©ments du tableau sont initialis√©s √† 0 (pas undefined)

/* 11 types de tableaux typ√©s */
// https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/TypedArray

// Structure de nommage : [U]Int(8|16|32)Array
// [U] = Unsigned = Non sign√© => nombres >= 0
// Int = Integer = Entier => nombres entiers (sans virgule donc !)
// (8|16|32) = nombre de bits de stockage / √©l√©ment (1, 2 ou 4 octets), plus on a de bits plus on peut stocker des nombres de grande valeur

// Type sp√©cial : Uint8ClampedArray
// Si on met une valeur < 0 ou > 255, il affecte 0 ou 255 respectivement (plus lent)

/* Les m√©thodes disponibles */
// Les m√™mes que sur les tableaux classiques en JS sauf celles qui modifient la taille du tableau (ex. : push(), pop(), shift(), unshift(), concat(), splice()) ou qui n√©cessitent que les √©l√©ments soient autre chose que des nombres (flat())

// üí° Pour travailler avec NodeJS et les TypedArray
const { Buffer } = require('node:buffer');

const typedArray = new Uint8Array(3);
typedArray[1] = 260;
console.log(typedArray[1]);
typedArray[0] = -12;
console.log(typedArray[0]);

const clamped = new Uint8ClampedArray(5);
clamped[1] = 260;
console.log(clamped[1]);