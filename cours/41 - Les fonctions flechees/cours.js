/* Les fonctions fl√©ch√©es */

// Introduites dans ES6, elles permettent d'√©crire et de lire plus vite des fonctions (mais pas que !)

/* Syntaxe simplifi√©e */

// Fonction classique
function calculTTC(prixHT, TVA) {
  let taxe = prixHT * TVA / 100;
  let prixTTC = prixHT + taxe;
  return prixTTC;
}
console.log(calculTTC(100, 20));

// Fonction fl√©ch√©e
let ffCalculTTC = (prixHT, TVA) => {
  let taxe = prixHT * TVA / 100;
  let prixTTC = prixHT + taxe;
  return prixTTC;
}
console.log(ffCalculTTC(100, 20));

/* Simplification de la syntaxe : return implicite */

// Fonction classique
// function calculTTC2(prixHT, TVA) {
//   return prixHT * (1 + TVA / 100);
// }
// console.log(calculTTC2(100, 20));

// // Fonction fl√©ch√©e
// let ffCalculTTC2 = (prixHT, TVA) => prixHT * (1 + TVA / 100);
// console.log(ffCalculTTC2(100, 20));

/* Parenth√®ses facultatives si un seul param√®tre */

// Fonction classique
// function saluer(prenom) {
//   return `Bonjour ${prenom}`;
// }
// console.log(saluer("Tom"));

// // Fonction fl√©ch√©e
// let ffSaluer = prenom => `Bonjour ${prenom}`;
// console.log(ffSaluer("Tom"));

/* Parenth√®ses n√©cessaires si aucun param√®tre */

// Fonction classique
// function reponse() {
//   return 42;
// }
// console.log(reponse());

// // Fonction fl√©ch√©e
// let ffReponse = () => 42;
// console.log(ffReponse());

/* Comment retourner un objet ? (Erreur fr√©quente) */

// Fonction classique
// function creerObjet() {
//   return {
//     prenom: "Tom",
//     nom: "Redocemia",
//   };
// }
// console.log(creerObjet());

// // üö® Fonction fl√©ch√©e
// let ffCreerObjet = () => {
//   prenom: "Tom",
//   nom: "Redocemia",
// };
// console.log(ffCreerObjet());

/* Une fonction fl√©ch√©e n'a pas de mot-cl√© this !
On ne peut donc pas l'utiliser en tant que m√©thode ! */

// let personne = {
//   prenom: "Tom",
//   nom: "Redocemia",
//   age: 42,
//   saluer: function() {
//     console.log(`Bonjour, je suis ${this.prenom} ${this.nom}, j'ai ${this.age} ans`);
//   }
// }

// personne.saluer();

/* Challenge : fonction imbriqu√©e */

// let personne = {
//   prenom: "Tom",
//   nom: "Redocemia",
//   age: 42,
// }

// function identite() {
//   console.log(`Voici mon identit√© : ${this.prenom} ${this.nom}`);

//   function calculerAgeEnJours() {
//     return this.age * 365;
//   }

//   console.log(`J'ai ${this.age} ans soit ${calculerAgeEnJours()} jours !`);
// }

// personne.identite = identite;
// personne.identite();

/* Challenge : fonction imbriqu√©e (√©criture diff√©rente mais identique) */

// let personne = {
//   prenom: "Tom",
//   nom: "Redocemia",
//   age: 42,
//   identite() {
//     console.log(`Voici mon identit√© : ${this.prenom} ${this.nom}`);

//     function calculerAgeEnJours() {
//       return this.age * 365;
//     }

//     console.log(`J'ai ${this.age} ans soit ${calculerAgeEnJours()} jours !`);
//   }
// }

// personne.identite();

// ‚ÑπÔ∏è On verra des exemples suppl√©mentaires dans la prochaine le√ßon !

/* Les fonctions fl√©ch√©es n'ont pas acc√®s √† l'objet sp√©cial arguments */

// function variadique() {
//   console.log(arguments);
// }
// variadique("bonjour", 1, true);

// let ffVariadique = () => {
//   console.log(arguments);
// }
// ffVariadique("bonjour", 1, true);

/* Alternative : utiliser la syntaxe du reste des param√®tres "..." */

// let ffVariadique = (...args) => {
//   console.log(args);
// }
// ffVariadique("bonjour", 1, true);

/* Ce qu'il faut retenir
- une fonction fl√©ch√©e s'utilise en lieu et place de n'importe quelle autre fonction classique (souvent on les utilise en tant que callbacks, on le verra bient√¥t). Cela veut dire qu'on peut faire du destructuring, qu'on peut utiliser la syntaxe du reste "..." des param√®tres etc.
- une fonction fl√©ch√©e n'a pas de this, elle h√©rite de celui de la port√©e englobante
- une fonction fl√©ch√©e ne peut pas acc√©der √† l'objet sp√©cial arguments (mais on peut contourner le probl√®me gr√¢ce √† "...")
*/