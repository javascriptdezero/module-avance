/* R√©sum√© et ce qu'il faut retenir */

/* Les m√©thodes sur les types de donn√©es standards :

// Fonction constructeur
function Array() { // Convention 1√®re lettre en majuscule
  this.length = ...
}

// Prototype de la fonction constructeur (un simple objet JS)
Array.prototype = {
  includes: function (...) { ... },
  map: function (...) { ... },
  filter: function (...) { ... },
  constructor: Array,
};

// Propri√©t√©s et m√©thodes statiques
Array.from = function(...) { ... }
Array.of = function(...) { ... }

// Ce qui explique comment est √©crit la documentation du MDN !
https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Array/includes

// Appel du constructeur avec new
let tableau = new Array(1,2,3);
*/

/* L'op√©rateur new :
- Cr√©e un {} qui est r√©f√©renc√© par le mot-cl√© this
- Relie le [[Prototype]] de l'instance √† la propri√©t√© prototype du constructeur
- Renvoie automatiquement l'instance cr√©√©e (sans avoir √† utiliser return)
*/

/* R√©solution de propri√©t√© */
function Tweet(auteur, message) {
  this.auteur = auteur;
  this.message = message;
}

Tweet.prototype.afficher = function() {
  console.log(`Tweet de ${this.auteur} : ${this.message}`);
}

let tweet = new Tweet("J√©r√©my", "Ceci est un tweet");
tweet.afficher();

/* Prototype par d√©faut + h√©ritage "en cascade" 
Array.prototype => Object.prototype */
let tableau = [1,2,3];
console.log(tableau);

/* Obtenir le prototype d'un objet */
Object.getPrototypeOf(tableau);

/* Affecter le prototype d'un objet (üö® mauvaise pratique niveau performances !) */
Object.setPrototypeOf(tableau, Tweet.prototype); // ‚ùå
let obj = Object.create(Tweet.prototype); // ‚úÖ

/* Ajout/Suppression/Modification possible des prototypes natifs (üö® mauvaise pratique car on peut "casser" le fonctionnement des m√©thodes du langage) :
‚ùå On n'aura plus acc√®s √† la vraie m√©thode Array.prototype.includes() d√©finie dans la norme ECMAScript et impl√©ment√©e pour nous par l'interpr√©teur JavaScript !
*/
Array.prototype.includes = function() {
  console.log("coucou");
}
